<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org.//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jcticket.ticketing.mybatis.mapper.mypage.mypageMapper">



    <select id="selectLimit" parameterType="map" resultType="TicketingDTO">
        SELECT t.ticketing_at,
               t.ticketing_id,
               t.play_name,
               t.showing_date,
               t.ticketing_cnt,
               (SELECT cc.comn_code_name
                FROM comn_code cc
                WHERE cc.comn_code_id = t.ticketing_status) AS ticketing_status
        FROM ticketing t
                 INNER JOIN user u ON t.user_id = u.user_id
        WHERE u.user_id = #{user_id}
        ORDER BY t.ticketing_at DESC
            LIMIT 5;
    </select>


    <select id="selectLimit_img" parameterType="map" resultType="TicketingDTO">
        SELECT t.ticketing_at,
               t.ticketing_id,
               t.play_name,
               t.showing_date,
               t.ticketing_cnt,
               (SELECT cc.comn_code_name
                FROM jcticket.comn_code cc
                WHERE cc.comn_code_id = t.ticketing_status) AS ticketing_status,
               pi.play_poster_original_file_name,
               SUBSTRING(pi.play_poster_stored_file_name, 1, CHAR_LENGTH(pi.play_poster_stored_file_name) - 4) AS play_poster_stored_file_name
        FROM jcticket.ticketing t
                 INNER JOIN jcticket.user u ON t.user_id = u.user_id
                 LEFT JOIN jcticket.play_image pi ON t.play_name = SUBSTRING(pi.play_poster_original_file_name, 1, CHAR_LENGTH(pi.play_poster_original_file_name) - 4)
        WHERE u.user_id = 'wjswotmd2'
        ORDER BY t.ticketing_at DESC
            LIMIT 3;
    </select>


    <select id="count" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM ticketing t
        JOIN user u ON t.user_id = u.user_id
        WHERE
        TRUE
        AND t.user_id = #{user_id} <!-- 수정된 부분 -->
        <choose>
            <when test='option=="A"'>
                AND t.ticketing_status IN ('Y', 'N')
            </when>
            <when test='option=="Y"'>
                AND t.ticketing_status = 'Y'
            </when>
            <when test='option=="C"'>
                AND t.ticketing_status = 'N'
            </when>
        </choose>
        <if test=" (start_date != '' and end_date != '') and (start_date != null and end_date != null) ">
            AND t.ticketing_at BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d')
        </if>;
    </select>
    <!--  ===========================================================================================================================================================================  -->

    <!--  view page  리스트 출력  -->
    <select id="view_count" parameterType="map" resultType="int">
        SELECT COUNT(*) AS total_count
        FROM (
        SELECT t.ticketing_id
        FROM ticketing t
        JOIN play p ON t.play_name = p.play_name
        JOIN user u ON t.user_id = u.user_id <!-- 추가된 부분 -->
        WHERE true
        AND u.user_id = #{user_id} <!-- 추가된 부분 -->
        <choose>
            <when test='option=="A"'>
                AND p.play_major_cat IN ('연극', '콘서트', '전시', '뮤지컬')
            </when>
            <when test='option=="M"'>
                AND p.play_major_cat = '뮤지컬'
            </when>
            <when test='option=="C"'>
                AND p.play_major_cat = '콘서트'
            </when>
            <when test='option=="J"'>
                AND p.play_major_cat = '전시'
            </when>
            <when test='option=="G"'>
                AND p.play_major_cat = '연극'
            </when>
        </choose>
        <if test="(start_date != '' and end_date != '') and (start_date != null and end_date != null)">
            AND t.ticketing_at BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d')
        </if>
        <if test="keyword != null and keyword != ''">
            AND t.play_name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        GROUP BY t.ticketing_id
        ) AS ticket_count;

    </select>

    <!--  ===========================================================================================================================================================================  -->

    <!-- TicketingDto 기반으로 만든 mypage_ticket 페이지 -->
    <select id="selectAll" parameterType="map" resultType="TicketingDto">
        SELECT
        t.ticketing_at,
        t.ticketing_id,
        t.play_name,
        t.showing_date,
        t.ticketing_cnt,
        (SELECT cc.comn_code_name FROM comn_code cc WHERE cc.comn_code_id = t.ticketing_status) AS ticketing_status
        FROM
        ticketing t
        WHERE
        TRUE
        <choose>
            <when test='option=="A"'>
                AND t.ticketing_status IN ('Y', 'N')
            </when>
            <when test='option=="Y"'>
                AND t.ticketing_status = 'Y'
            </when>
            <when test='option=="C"'>
                AND t.ticketing_status = 'N'
            </when>
        </choose>
        <if test=" (start_date != '' and end_date != '') and (start_date != null and end_date != null) ">
            AND t.ticketing_at BETWEEN DATE_FORMAT(#{start_date} , '%Y-%m-%d') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d')
        </if>
        AND t.user_id = #{user_id} <!-- 추가된 부분 -->
        ORDER BY ticketing_at DESC
        LIMIT #{pageSize}
        OFFSET #{offset};
    </select>

    <!--  ===========================================================================================================================================================================  -->

    <insert id="insert" parameterType="TicketingDto">
        insert into ticketing (ticketing_id, ticketing_at, ticketing_cnt, ticketing_status,
                               showing_info, showing_date, cancelable_at, play_price, stage_name,
                               choice_show_seat, ticketing_price, user_name, user_id, viewing_at,
                               play_name, created_at, created_id, updated_at, updated_id)
        VALUES (#{ticketing_id}, #{ticketing_at}, #{ticketing_cnt}, #{ticketing_status},
                #{showing_info}, #{showing_date}, current_timestamp, #{play_price},
                #{stage_name}, #{choice_show_seat}, #{ticketing_price}, #{user_name},
                #{user_id}, current_timestamp, #{play_name}, current_timestamp, #{created_id},
                current_timestamp, #{updated_id})
    </insert>

    <!--  ===========================================================================================================================================================================  -->


    <select id="select_view" parameterType="map" resultType="TicketingDto">
        SELECT
        t.ticketing_id,
        MAX(t.ticketing_at) AS ticketing_at,
        MAX(t.stage_name) AS stage_name,
        MAX(t.selected_seats) AS selected_seats,
        MAX(p.play_major_cat) AS play_major_cat,
        MAX(t.play_name) AS play_name,
        pi.play_poster_original_file_name,
        SUBSTRING(pi.play_poster_stored_file_name, 1, CHAR_LENGTH(pi.play_poster_stored_file_name) - 4) AS play_poster_stored_file_name
        FROM
        ticketing t
        JOIN play p ON t.play_name = p.play_name
        JOIN user u ON t.user_id = u.user_id
        LEFT JOIN play_image pi ON t.play_name = SUBSTRING(pi.play_poster_original_file_name, 1, CHAR_LENGTH(pi.play_poster_original_file_name) - 4)
        WHERE
        true
        AND u.user_id = #{user_id}
        <choose>
            <when test='option=="A"'>
                AND p.play_major_cat IN ('연극', '콘서트', '전시', '뮤지컬')
            </when>
            <when test='option=="M"'>
                AND p.play_major_cat = '뮤지컬'
            </when>
            <when test='option=="C"'>
                AND p.play_major_cat = '콘서트'
            </when>
            <when test='option=="J"'>
                AND p.play_major_cat = '전시'
            </when>
            <when test='option=="G"'>
                AND p.play_major_cat = '연극'
            </when>
        </choose>
        <if test="(start_date != '' and end_date != '') and (start_date != null and end_date != null)">
            AND t.ticketing_at BETWEEN DATE_FORMAT(#{start_date}, '%Y-%m-%d') AND DATE_FORMAT(#{end_date}, '%Y-%m-%d')
        </if>
        <if test="keyword != null and keyword != ''">
            AND t.play_name LIKE CONCAT('%', #{keyword}, '%')
        </if>
        GROUP BY
        t.ticketing_id
        ORDER BY
        ticketing_at DESC
        LIMIT #{pageSize}
        OFFSET #{offset};
    </select>

    <!--  ===========================================================================================================================================================================  -->

    <insert id="Inquiry_insert" parameterType="InquiryDto">
        INSERT INTO `Inquiry` (`inquiry_seq`, `inquiry_title`, `inquiry_img`, `inquiry_content`,
                               `inquiry_time`, `inquiry_category`, `user_id`, `created_at`, `created_id`,
                               `updated_at`, `updated_id`)
        VALUES (#{inquiry_seq}, #{inquiry_title}, #{inquiry_img}, #{inquiry_content},
                current_timestamp, #{inquiry_category}, #{user_id}, current_timestamp,
                #{created_id}, current_timestamp, #{updated_id});
    </insert>

    <!--  ===========================================================================================================================================================================  -->

    <!--  예매 상세보기   -->
    <select id="ticket_detail" resultType="TicketingDto" parameterType="String">
        SELECT
            t.ticketing_at,
            t.user_name,
            t.showing_date,
            t.stage_name,
            t.ticketing_id,
            t.play_name,
            t.ticketing_cnt,
            t.selected_seats,
            pi.play_poster_original_file_name,
            SUBSTRING(play_poster_stored_file_name, 1, CHAR_LENGTH(play_poster_stored_file_name) - 4)as play_poster_stored_file_name,
            (
                SELECT cc.comn_code_name
                FROM comn_code cc
                WHERE cc.comn_code_id = t.ticketing_status
            ) AS ticketing_status
        FROM
            ticketing t
                JOIN
            play_image pi ON t.play_name  = SUBSTRING(play_poster_original_file_name, 1, CHAR_LENGTH(play_poster_original_file_name) - 4)
        WHERE
            t.ticketing_id = #{ticketing_id};
    </select>

    <!--  ===========================================================================================================================================================================  -->

    <select id="coupon_select" parameterType="String" resultType="CouponDto">
        SELECT *
        FROM coupon
        <if test="coupon_id != null and coupon_id != ''">
            WHERE coupon_id = #{coupon_id}
        </if>
    </select>

    <insert id="coupon_insert" parameterType="MyUserCouponDto">
        INSERT INTO user_coupon
        (user_coupon_id, user_id, coupon_id, user_coupon_use_at, user_coupon_issue_at, user_coupon_expire_at, user_coupon_use_yn,
         created_at, created_id, updated_at, updated_id)
        VALUES (#{user_coupon_id}, #{user_id}, #{coupon_id}, null, NOW(), NOW() + INTERVAL + 1 WEEK, 'N', NOW(),
                #{created_id}, NOW(), #{updated_id});
    </insert>


    <update id="update_coupon" parameterType="CouponDto">
        update coupon
        set coupon_status = 'U'
        where coupon_id = #{coupon_id};
    </update>


    <select id="coupon_list" parameterType="map" resultType="MyUserCouponDto">
        SELECT
        uc.coupon_id,
        uc.user_coupon_issue_at,
        uc.user_coupon_expire_at,
        CASE
        WHEN #{button} = 'on' AND uc.user_coupon_use_yn = 'N' THEN (SELECT coupon_name FROM coupon c WHERE c.coupon_id = uc.coupon_id)
        WHEN #{button} = 'off' AND uc.user_coupon_use_yn = 'Y' THEN (SELECT coupon_name FROM coupon c WHERE c.coupon_id = uc.coupon_id)
        ELSE NULL
        END AS coupon_name,
        CASE
        WHEN #{button} = 'on' AND uc.user_coupon_use_yn = 'N' THEN (SELECT coupon_discount_amount FROM coupon c WHERE c.coupon_id = uc.coupon_id)
        WHEN #{button} = 'off' AND uc.user_coupon_use_yn = 'Y' THEN (SELECT coupon_discount_amount FROM coupon c WHERE c.coupon_id = uc.coupon_id)
        ELSE NULL
        END AS coupon_discount_amount,
        CASE
        WHEN #{button} = 'on' AND uc.user_coupon_use_yn = 'N' THEN (SELECT coupon_use_condition FROM coupon c WHERE c.coupon_id = uc.coupon_id)
        WHEN #{button} = 'off' AND uc.user_coupon_use_yn = 'Y' THEN (SELECT coupon_use_condition FROM coupon c WHERE c.coupon_id = uc.coupon_id)
        ELSE NULL
        END AS coupon_use_condition
        FROM
        user_coupon uc
        JOIN user u ON uc.user_id = u.user_id <!-- 추가된 부분 -->
        WHERE
        ((#{button} = 'on' AND uc.user_coupon_use_yn = 'N') OR
        (#{button} = 'off' AND uc.user_coupon_use_yn = 'Y'))
        AND u.user_id = #{user_id} <!-- 추가된 부분 -->
        ORDER BY
        uc.user_coupon_expire_at DESC
        LIMIT
        #{pageSize}
        OFFSET
        #{offset};
    </select>


    <select id="coupon_count" parameterType="map" resultType="int">
        SELECT COUNT(*) AS count
        FROM user_coupon uc
        JOIN user u ON uc.user_id = u.user_id <!-- 추가된 부분 -->
        WHERE uc.user_coupon_use_yn IN ('N', 'Y')
        AND (
        (#{button} = 'on' AND uc.user_coupon_use_yn = 'N') OR
        (#{button} = 'off' AND uc.user_coupon_use_yn = 'Y')
        )
        AND u.user_id = #{user_id}; <!-- 추가된 부분 -->
    </select>


    <select id="user_info" parameterType="String" resultType="UserDto">
        SELECT user_id, user_name, user_nickname, user_tel, user_birth, user_email,user_password
        FROM user
        WHERE user_id = #{user_id};
    </select>


    <update id="user_update" parameterType="UserDto">
        UPDATE user
        SET user_email    = #{user_email},
            user_nickname = #{user_nickname},
            user_password = #{user_password},
            user_tel      = #{user_tel},
            user_address  = #{user_address}
            user_update_at = NOW();
        WHERE user_id = #{user_id};
    </update>


    <update id="coupon_update">
        UPDATE user_coupon
        SET user_coupon_use_yn = 'Y'
        WHERE user_coupon_use_yn = 'N' AND <![CDATA[user_coupon_expire_at < now();]]>
    </update>


    <update id="withdraw" parameterType="map">
        UPDATE user
        SET user_retire_yn = 'Y'
        WHERE user_id = #{user_id}
        AND user_password = #{user_password};
    </update>

    <update id="ticket_cancel" parameterType="String">
        UPDATE ticketing
        SET ticketing_status = 'N'
        WHERE ticketing_id = #{ticketing_id};
    </update>

</mapper>