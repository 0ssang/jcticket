<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jcticket.ticketing.mybatis.mapper.ticketing.TicketingMapper">
    <!-- 예매창 구현에 필요한 쿼리들 -->

    <!-- ********** step1. 일정 선택 ************-->

    <!-- 회차 테이블 insert하는 쿼리 -->
    <insert id="insert" parameterType="ShowingDto" useGeneratedKeys="true" keyProperty="showing_seq">
        INSERT INTO showing
        (showing_seq,
         showing_start_at,
         showing_end_at,
         showing_info,
         showing_date,
         showing_day,
         showing_status,
         showing_seat_cnt,
         showing_seat_price,
         play_id,
         stage_id,
         created_at,
         created_id,
         updated_at,
         updated_id)
        VALUES
            (#{showing_seq},
             CURRENT_TIMESTAMP,
             CURRENT_TIMESTAMP,
             #{showing_info},
             #{showing_date},
             #{showing_day},
             #{showing_status},
             #{showing_seat_cnt},
             #{showing_seat_price},
             #{play_id},
             #{stage_id},
             CURRENT_TIMESTAMP,
             'system',
             CURRENT_TIMESTAMP,
             'system')
    </insert>

    <!-- 공연아이디별 삭제 -->
    <delete id="deleteByPlayId" parameterType="string">
        delete
        from showing
        where 1=1
          and play_id = #{play_id}
    </delete>

<!--    회차시퀀스별 삭제-->
    <delete id="deleteBySeq" parameterType="int">
        delete
        from showing
        where 1=1
        and showing_seq = #{showing_seq}
    </delete>

    <!-- 전체 삭제하는 쿼리 -->
    <delete id="deleteAll">
        delete from showing
    </delete>

    <!-- 공연아이디별회차 수 카운트 -->
    <select id="countByPlayId" parameterType="String" resultType="int">
        select count(*)
        from showing
        where 1=1
        and play_id = #{play_id}
    </select>

<!--    공연아이디별 조회-->
    <select id="selectByPlayId" resultType="ShowingDto">
        select *
        from showing
        where 1=1
          and play_id = #{play_id}
    </select>

<!--    공연아이디별 공연일정 조회-->
    <select id="selectDateByPlayId" parameterType="string" resultType="hashmap">
        select showing_date
        from showing
        where 1=1
        and play_id = #{play_id}
        group by showing_date
        order by showing_date asc;
    </select>
<!--    공연아이디 && 공연일정별  회차시퀀스, 회차정보 조회-->
    <select id="selectRound" parameterType="hashmap" resultType="hashmap">
        select showing_seq, showing_info
        from showing
        where 1=1
        and play_id = #{play_id}
        and showing_date = #{date_text}
        order by showing_info asc
    </select>

<!--    공연아이디로 공연명과 ,공연포스터, 공연장명 조회-->
    <select id="selectPlayStageName" parameterType="string" resultType="hashmap">
        SELECT p.play_name, t.stage_name
        from play p
        inner join (select DISTINCT play_id , stage_id from showing) as s
        on p.play_id = s.play_id
        inner join stage t
        on s.stage_id = t.stage_id
        where 1=1
        and s.play_id = #{play_id}
    </select>

    <!-- 공연아이디로 회차시퀀스 조회 -->

    <select id="selectSeq" parameterType="string" resultType="hashmap">
        select showing_seq
        from showing
        where 1=1
        and play_id = #{play_id}
    </select>

    <!-- 공연날짜 조회 - datepicker에 표시하기 위해-->
    <select id="selectShowingDate" parameterType="string" resultType="hashmap">
        select showing_date
        from showing
        where 1=1
        and play_id = #{play_id}
        order by showing_date asc;
    </select>

    <!-- 공연회차정보, 시퀀스 조회 - 시퀀스도 같이 얻어와서 회차별 좌석정보 구분한다. -->
    <!-- Parameter 가 2개인데 별도의 DTO 작성없이 HashMap으로 대체한다. -->
    <select id="selectShowingRound" parameterType="hashmap" resultType="hashmap">
        select showing_info,showing_seq
        from showing
        where 1=1
        and showing_date = #{dateText} and play_id = #{play_id}
    </select>


    <!-- ************** step2. 좌석선택 **************** -->
    <!-- seat 테이블 insert -->
    <insert id="insertSeat" parameterType="SeatDto">
        INSERT INTO jcticket.seat (seat_row, seat_col, stage_id, created_at, created_id, updated_at, updated_id)
        VALUES(#{seat_row}, #{seat_col}, #{stage_id}, CURRENT_TIMESTAMP, 'system', CURRENT_TIMESTAMP, 'system');
    </insert>

    <!-- seat 테이블 delete -->
    <delete id="deleteSeatByStageId" parameterType="string">
        delete from seat where stage_id = #{stage_id}
    </delete>

    <!-- show_seat 테이블 insert -->
    <insert id="insertShowSeat" parameterType="ShowSeatDto">
        INSERT INTO show_seat (showing_seq, seat_row, seat_col, stage_id, show_seat_status, created_at, created_id, updated_at, updated_id)
        VALUES(#{showing_seq}, #{seat_row}, #{seat_col}, #{stage_id}, "Y", CURRENT_TIMESTAMP, "0sang", CURRENT_TIMESTAMP, "0sang");
    </insert>

    <!-- show_seat 테이블 delete -->
    <delete id="deleteShowSeat">
        delete from show_seat
    </delete>

    <!-- 회차테이블의 회차좌석수 구하기 -->
    <select id="selectSeatCnt" parameterType="int" resultType="int">
        select showing_seat_cnt
        from showing
        where 1=1
        and showing_seq = #{showing_seq}
    </select>

    <!-- 회차 시퀀스로 회차좌석가격 조회 -->
    <select id="selectPrice" parameterType="int" resultType="int">
        select showing_seat_price
        FROM showing s
        WHERE 1=1
          and showing_seq = #{showing_seq}
    </select>
    <!-- 회차 시퀀스로 좌석번호, 좌석상태 리스트 조회 -->
    <select id="selectSeatList" parameterType="int" resultType="hashmap">
        SELECT CONCAT(seat_row, seat_col) AS seat_id, show_seat_status AS seat_status
        FROM show_seat ss
        WHERE 1=1
          AND showing_seq = #{showing_seq}
        order by seat_row asc;
    </select>

    <!-- 회차 시퀀스로 회차의 행, 열의 마지막 값 구하기(size) -->
    <select id="selectEndNum" parameterType="int" resultType="hashmap">
        SELECT MAX(seat_col) AS end_col, MAX(seat_row) AS end_row
        from show_seat ss
        where 1=1
          and showing_seq = #{showing_seq}
    </select>


    <!-- step3. 쿠폰선택 -->
    <!-- 쿠폰DTO insert -->
    <insert id="insertCoupon" parameterType="CouponDto">
        INSERT INTO coupon
        (coupon_id, coupon_reg_at, coupon_name, coupon_useable_start_at, coupon_useable_end_at, coupon_discount_amount, coupon_min_order_amount, coupon_use_yn, coupon_status, coupon_description, coupon_use_condition, created_at, created_id, updated_at, updated_id)
        VALUES(#{coupon_id}, default, #{coupon_name}, #{coupon_useable_start_at}, #{coupon_useable_end_at}, #{coupon_discount_amount}, #{coupon_min_order_amount}, #{coupon_use_yn}, default, #{coupon_description}, #{coupon_use_condition}, default, #{created_id}, default, #{updated_id});
    </insert>

    <!-- 쿠폰DTO delete -->
    <delete id="deleteAllCoupon">
        delete from coupon
    </delete>

    <!-- 쿠폰-유저 DTO insert -->
    <insert id="insertUserCoupon" parameterType="UserCouponDto">
        INSERT INTO jcticket.user_coupon
        (user_coupon_id, user_id, coupon_id, user_coupon_use_at, user_coupon_issue_at, user_coupon_expire_at, user_coupon_use_yn, created_at, created_id, updated_at, updated_id)
        VALUES(#{user_coupon_id}, #{user_id}, #{coupon_id}, DEFAULT, #{user_coupon_issue_at}, #{user_coupon_expire_at}, DEFAULT, DEFAULT, #{created_id}, DEFAULT, #{updated_id});
    </insert>

    <!-- 쿠폰-유저 DTO delete -->
    <delete id="deleteAllUserCoupon">
        delete from user_coupon
    </delete>

    <!-- 유저아이디로 유저-쿠폰아이디, 쿠폰아이디 리스트 조회하기 -->
    <select id="selectUserCouponList" parameterType="string" resultType="UserCouponDto">
        select user_coupon_id , coupon_id
        from user_coupon
        where 1=1
          and user_id = #{user_id}
          and user_coupon_use_yn = 'N'
          and NOW() BETWEEN user_coupon_issue_at AND user_coupon_expire_at ;
    </select>

    <!-- 쿠폰아이디로 쿠폰명, 쿠폰할인가격, 쿠폰사용조건, 쿠폰사용가능시작, 종료일 조회 -->
    <select id="selectCoupon" parameterType="string" resultType="CouponDto">
        select coupon_name,
               coupon_discount_amount,
               coupon_min_order_amount ,
               coupon_use_condition,
               coupon_description,
               DATE_FORMAT(coupon_useable_start_at, '%Y-%m-%d')  coupon_useable_start_at ,
               DATE_FORMAT(coupon_useable_end_at, '%Y-%m-%d') coupon_useable_end_at
        from coupon c
        where 1=1
          and coupon_id = #{coupon_id}
    </select>


    <!-- step4. 결제방법 -->

    <!-- etc. -->
    <!--티켓 모든 정보 조회하기. -->
    <select id="selectAll" resultType="TicketingDto">
        SELECT ticketing_id, ticketing_at, ticketing_cnt,
               ticketing_status, showing_info, showing_date,
               cancelable_at, play_price, stage_name,
               choice_show_seat, ticketing_price, user_name,
               viewing_at, play_name
        FROM ticketing
    </select>
</mapper>
<!-- com.jcticket.example.mybatis.mapper.ticketing.ticketingMapper -->